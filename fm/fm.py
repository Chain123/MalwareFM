import numpy as np
import matplotlib.pyplot as plt
from sklearn.svm import NuSVC
import numpy as np
from scipy import sparse
import json
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import classification_report
import sys
import os
from random import shuffle
import argparse
import math
# import pickle
from sklearn.externals import joblib
import timeit
from polylearn import FactorizationMachineClassifier

parser = argparse.ArgumentParser()
parser.add_argument("-f", "--feature",
	                    help="sparse matrix stores embedded feature")
parser.add_argument("-l", "--label",									## this is only for non-sparse label vector case
	                    help="JSON file label of all samples")

args = parser.parse_args()
# if os.path.exists(args.feature) and os.path.exists(args.label):
loader1 = np.load(args.feature)
# loader2 = np.load("vector_label.npz")
feature = sparse.csr_matrix((loader1['data'],loader1['indices'],loader1['indptr']),shape=loader1['shape'])
label = json.load(open(args.label))

# svc=SVC()
label2 = np.array(label).reshape(len(label))
#       shuffle(label2)
# scl.set_params(C=10.0)
tuned_params=[{'kernel':['rbf','sigmoid'],'gamma': [5e-5,1e-5,5e-6],'C': [1,2,4],'class_weight': [{1:1}]}]

scores=['precision','recall']

# split trainning and testing data

# number_of_train = int(math.ceil(len(label)/2))?\
number_of_train = int(len(label2)*0.8)
number_of_test = len(label2) - number_of_train
start = 1000
train_feature = feature[0:number_of_train]
train_label = label2[0:number_of_train]

#test_feature = feature[start: number_of_test + start]
#test_label = label2[start: number_of_test + start]
test_feature = feature[number_of_train:]
test_label = label2[number_of_train: ]

