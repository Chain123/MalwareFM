import numpy as np
#import matplotlib.pyplot as plt
# from sklearn.svm import NuSVC
from sklearn.externals import joblib
from polylearn import FactorizationMachineClassifier

from scipy import sparse
import json
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import classification_report
import sys
import os
import argparse
import math

## preparing data
parser = argparse.ArgumentParser()
parser.add_argument("-f", "--feature",
	                    help="sparse matrix stores embedded feature")
parser.add_argument("-l", "--label",									## this is only for non-sparse label vector case
	                    help="JSON file label of all samples")
parser.add_argument("-t", "--train",
                            help="indicator, whether this is for train or prediction")
args = parser.parse_args()

loader1 = np.load(args.feature)
label = json.load(open(args.label))
label2 = np.array(label).reshape(len(label))
feature = sparse.csr_matrix((loader1['data'],loader1['indices'],loader1['indptr']),shape=loader1['shape'])
# label = sparse.csr_matrix((loader2['data'],loader2['indices'],loader2['indptr']),shape=loader2['shape'])
# label2 = label.toarray().reshape(129013)

if args.train:
    #number_of_train = int(len(label2)*0.8)
    #number_of_test = len(label2) - number_of_train
    #start = 1000
    #train_feature = feature[0:number_of_train]
    #train_label = label2[0:number_of_train]

    #test_feature = feature[start: number_of_test + start]
    #test_label = label2[start: number_of_test + start]
    #test_feature = feature[number_of_train:]
    #test_label = label2[number_of_train: ]
    print('train fm_10 model')
    fm_10 = FactorizationMachineClassifier(n_components=10, fit_linear=True,
                                    random_state=0, loss= 'logistic')
    fm_10.fit(feature,label2)
   
    joblib.dump(fm_10,'../model/fm/fm_10.pkl')
    
    print('train fm_10 model, linear False')
    fm_10_n = FactorizationMachineClassifier(n_components=10, fit_linear=False,
                                    random_state=0, loss= 'logistic')
    fm_10_n.fit(feature,label2)
   
    joblib.dump(fm_10_n,'../model/fm/fm_10_NoLinear.pkl')


    
else:
    print('prediction on input samples')
    # load models
    # fm_model = 
    p_10 = joblib.load('../model/fm/fm_10.pkl') 
    p_10_n = joblib.load('../model/fm/fm_10_NoLinear.pkl') 
    p_10_prob = np.array(p_10.predict_proba(feature))
    p_10_n_prob = np.array(p_10.predict_proba(feature))
    with open('../result/fm/prob.json','w') as myfile:
        json.dump(zip(label2,p_10_prob,p_10_n_prob),myfile)
    #print(confusion_matrix(label2,p_10_prob))
    #print(confusion_matrix(label2,p_10_n_prob)) 
    print(sum(test_label))


