import json
import sys
import os
import numpy as np 
from scipy.sparse import csr_matrix
from scipy import sparse 
import random

def save_sparse_csr(filename,array):
	np.savez(filename,data=array.data,indices=array.indices,
			indptr=array.indptr,shape=array.shape)


outputpath = sys.argv[3]

if os.path.exists(outputpath + '/featuredic.json'):
	featuredic = json.load(open(outputpath + "/featuredic.json"))
else:
	featuredic = {}
	allfeature= json.load(open(outputpath + "/updatedallfeature.json"))
	index = 0
	for item in allfeature:
		featuredic[item] = index
		index +=1
	with open(outputpath + '/featuredic.json','w') as myfile:
		json.dump(featuredic,myfile)

	print('saved...')
	print(len(featuredic))

featurecol = []
label = []
filenames = []

## scanning all malware files
arr = os.listdir(sys.argv[1])
for file in arr:
	feature = json.load(open(sys.argv[1]+'/'+file,'r'))
	filenames.append(file)
	label.append(1)
	embeddedFeature = []
	#print(file)
	for attribute in feature:
		if attribute != 'url':
			for f in feature[attribute]:
				embeddedFeature.append(featuredic[f])
	featurecol.append(embeddedFeature)

## scaning clear files
arr = os.listdir(sys.argv[2])
for file in arr:
	feature = json.load(open(sys.argv[2]+'/'+file,'r'))
	filenames.append(file)
	label.append(0)
	embeddedFeature = []
	#print file
	for attribute in feature:
		if attribute !='url':
			for f in feature[attribute]:
				embeddedFeature.append(featuredic[f])
	featurecol.append(embeddedFeature)

numberFiles = len(label)

## shuffle all samples and store (shuffle three list with the same random order)

# shuffle
info  = list(zip(featurecol,label,filenames))
random.shuffle(info)
featurecol,label,filenames = zip(*info)

# store
with open('../data/label.json','w') as myfile:                  # when label is not that sparse we can just store it in a json file
	json.dump(label,myfile,indent=4,sort_keys=True)

with open('../data/samplename.json','w') as myfile:			    # this list is definitely dense
	json.dump(filenames,myfile,indent=4,sort_keys=True)

with open('../data/embededfeature_list.json','w') as myfile:
	json.dump(featurecol,myfile,indent=4,sort_keys=True)

allrow = []
allcol =[]
for ind, f in enumerate(featurecol):
	row = [ind] * len(f)
	allrow += row
	allcol += f

number_col = len(featuredic)
vectorfeature = csr_matrix((np.ones(len(allcol)),(allrow,allcol)), shape=(numberFiles, number_col))
save_sparse_csr(outputpath + '/embeddedFeature',vectorfeature)
