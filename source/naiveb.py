import numpy as np
from scipy import sparse
import json
from sklearn.naive_bayes import MultinomialNB
from sklearn.naive_bayes import GaussianNB
from sklearn.naive_bayes import BernoulliNB
from sklearn.metrics import confusion_matrix
# from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
# from sklearn.metrics import classification_report
import sys
import os
# from random import shufflec
import argparse
import math
# import pickle
from sklearn.externals import joblib
import timeit


parser = argparse.ArgumentParser()
parser.add_argument("-f", "--feature",
	                    help="sparse matrix stores embedded feature")
parser.add_argument("-l", "--label",									## this is only for non-sparse label vector case
	                    help="JSON file label of all samples")
parser.add_argument("-t", "--train",
                            help="if train is true, will do cross validation for model selection")
parser.add_argument("-p", "--proba",
    		            help="if proba is true, load the saved model and test, get predicted probability on test data set and stored")
args = parser.parse_args()

# load data

loader1 = np.load(args.feature)
feature = sparse.csr_matrix((loader1['data'],loader1['indices'],loader1['indptr']),shape=loader1['shape'])

label = json.load(open(args.label))
label2 = np.array(label).reshape(len(label))

# parameter selection

## naive bayes do not need parameter selection 
if os.path.exists('../model/naive/Gaussiannb.pkl'):
    print('Naive bayes models already exist, loading ...')
    Gaussiannb_clf = joblib.load('../model/naive/Gaussiannb.pkl')
    bernoulli_clf = joblib.load('../model/naive/bernoullinb.pkl')
    multinomial_clf = joblib.load('../model/naive/multinomialnb.pkl')
else:
    print('Train new naive bayes models')
    Gaussiannb_clf = GaussianNB()
    multinomial_clf = MultinomialNB()
    bernoulli_clf= BernoulliNB()
    print("training....")
    multinomial_clf.fit(feature,label2)
    Gaussiannb_clf.fit(feature,label2)
    bernoulli_clf.fit(feature,label2)
    ##  save model
    print('saving models')
    joblib.dump(Gaussiannb_clf,'../model/Gaussiannb_clf.pkl') 
    joblib.dump(multinomial_clf,'../model/multinomial_clf.pkl') 
    joblib.dump(bernoulli_clf,'../model/bernoulli_clf.pkl') 
    print(len(label))
if args.proba:
    print(len(label2))
    Gaussiannb_prob = list(np.array(Gaussiannb_clf.predict_proba(feature)))
    multinomialnb_prob = list(np.array(multinomial_clf.predict_proba(feature)))
    bernoullinb_prob = list(np.array(bernoulli_clf.predict_proba(feature)))
    Gaussiannb_p = []
    multinomialnb_p = []
    bernoullinb_p = []
    for val in Gaussiannb_prob:
        Gaussiannb_p.append(list(val))
    for val in multinomialnb_prob:
        multinomialnb_p.append(list(val))
    for val in bernoullinb_prob:
        bernoullinb_p.append(list(val))

    final_result = zip(label, Gaussiannb_p, multinomialnb_p, bernoullinb_p) 
    with open('../result/naive/test_result.json') as myfile:
        json.dump(final_result,myfile)
    
print("Done!")

